<?php
/*
Plugin Name: Associative Dictionary
Author: Jeroen Smeets
Version: 1.3.2
Description: Adds a sidebar widget that creates a personal dictionary and shows words from it -- if a word does not exist it can be added
Plugin URI: http://dirkie.nu/projects/associative-dictionary/
Author URI: http://jeroensmeets.com/
Text Domain: assoc-dict
*/

// only load script when needed
// great idea from http://scribu.net/wordpress/optimal-script-loading.html
$assocdict_startword = false;

/* Load text domain */

add_action( 'plugins_loaded', 'assocdict_load_textdomain' );
function assocdict_load_textdomain() {
	load_plugin_textdomain( 'assoc-dict', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' ); 
}

/* Enqueue scripts and stylesheet */

add_action( 'init', 'assocdict_enqueue' );
function assocdict_enqueue() {

	wp_register_script('assocdictjs', plugins_url('associative-dictionary-widget/assoc_dict.js'), array('jquery'), '1.0');
	wp_register_style('assocdictcss', plugins_url('associative-dictionary-widget/assoc_dict.css'));

}

/* variable $assocdict_startword says if the script should be added to the footer, it is set to the word to start with after echoing the widget html */

add_action('wp_footer', 'assocdict_printscript');
function assocdict_printscript() {
	global $assocdict_startword;

	// should script be included on this page?
	if ( false === $assocdict_startword )
		return;

	// localize some values for assoc_dict.js script
	$_js				= array(
		'ajaxurl'		=> admin_url( 'admin-ajax.php' ),
		'nonce'			=> wp_create_nonce('assoc-dict-nonce'),
		'startword'		=> $assocdict_startword,
		'txt'			=> array(
								'word_not_in_dict'	=> __( "Words fail me -- you can add a description if you want.", 'assoc-dict' ),
								'button_add'		=> __( "add", 'assoc-dict' ),
								'button_cancel'		=> __( "back", 'assoc-dict' )
						)
	); 

	wp_localize_script( 'assocdictjs', 'assoc', $_js );

	wp_print_scripts('assocdictjs');
	wp_print_styles('assocdictcss');
}

/* ajax requests */

// get word and description, wether logged in or not
add_action( 'wp_ajax_get_word', 'assocdict_get_word' );
add_action( 'wp_ajax_nopriv_get_word', 'assocdict_get_word' );

function assocdict_get_word() {

	// replace everything that's not alphanumerical
	// $_w = ereg_replace( "[^[:alpha:]]", "", $_GET['word'] ); // deprecated
	$_w = preg_replace( '/[^[:alpha:]]/', "", $_GET['word'] );

	$_result = array(
		'status'	=> 404,
		'error'		=> 'Word not found',
		'word'		=> $_w
	);

	if ('' != trim( $_w ) ) {

		global $wpdb;
		$woord = $wpdb->get_row("select * from widget_assoc_dict where woord = '" . $_w . "';");
		if ( $woord ) {

			$_result = array(
				'status'	=> 200,
				'id'		=> $woord->woordid,
				'word'		=> $woord->woord,
				'desc'		=> $woord->omschrijving
			);

		}

	}

	echo json_encode( $_result );

	exit;

}

// add word with description, wether logged in or not
add_action( 'wp_ajax_add_word', 'assocdict_add_word' );
add_action( 'wp_ajax_nopriv_add_word', 'assocdict_add_word' );

function assocdict_add_word() {

	check_ajax_referer('assoc-dict-nonce', 'nonce');

	// replace everything that's not alphanumerical
	$_w = preg_replace( '/[^[:alpha:]]/', "", $_GET['addword'] );

	$_result = array(
		'status'	=> 404,
		'error'		=> 'Word could not be added',
		'word'		=> $_w
	);

	if ('' != trim( $_w ) ) {

		// already in database?
		global $wpdb;
		$woord = $wpdb->get_row("select * from widget_assoc_dict where woord = '" . $_w . "';");

		error_log( var_export( $woord, true ) );

		if ( !$woord ) {

			// clean up description
			// no HTML or scripts in description, and $wpdb will escape it for us
			$_cleandescription = wp_kses( stripslashes( $_GET['adddescr'] ), array() );

			// insert in database
			$wpdb->insert( 
				'widget_assoc_dict', 
				array( 
					'woord'			=> $_w,
					'omschrijving'	=> $_cleandescription,
					'date_time'		=> date("Y-m-d G:i:s"),
					'ip'			=> '',
					'useragent'		=> ''
				), 
				array( '%s', '%s', '%s', '%s', '%s')
			);

			// did we succeed?
			if (false !== $wpdb->insert_id ) {

				// yes, return 200 and new id
				$_result = array(
					'status'	=> 200,
					'id'		=> $wpdb->insert_id,
					'word'		=> $_w,
					'desc'		=> $_cleandescription
				);

				wp_mail(
					get_option( 'admin_email' ),
					__( 'mail_subject', 'assoc-dict') . ' (' . $_w . ')', 
					$_w . ":\n\n" . $_cleandescription . "\n\n\n\n" .
					"(This mail has been generated by the Associative Dictionary for Wordpress)",
					"From: woorden@dirkie.nu\r\n"
					. "X-Mailer: PHP/" . phpversion()
				);
			} else {
				error_log( $wpdb->last_error );
			}

		}

	}

	echo json_encode( $_result );

	exit;

}

////////////
// Widget //
////////////

function register_assocdict_widget() {
    register_widget("AssocDict_Widget");
}
add_action( 'widgets_init', 'register_assocdict_widget' );

class AssocDict_Widget extends WP_Widget {

	function __construct() {
		parent::__construct(
			'assocdict', // Base ID
			__('Associative Dictionary', 'assoc_dict'), // Name
			array( 'description' => __( 'A widget without use.', 'assoc_dict' ), ) // Args
		);
	}

	public function widget($args, $instance) {		

		global $wpdb;

		extract($args);
		$options        = get_option('widget_assoc_dict');

		$startword      = $instance['start'];

		# start with random word?
		if ( "yes" == $instance['random'] ) {

			$woord = $wpdb->get_row("select woordid as id from widget_assoc_dict order by rand() limit 1;");

			if ( $woord ) {
				$startword = $woord->id;
			}

		}

		echo $before_widget . $before_title . $instance['title'] . $after_title . "\n";

		// as this widget gets displayed, we make sure the js and css file gets added in the footer
		global $assocdict_startword;

		# do we have a word to start things off with?
		if ( '' != trim( $startword ) ) {

			$assocdict_startword = $startword;

			echo "  <div id=\"assoc_dict_word\">&nbsp;</div>\n";

		} else {

			echo "<div><i><small>";
			_e('word to start with not set', 'assoc-dict');
			echo "</small></i></div>\n";

		}

		echo $after_widget . "\n";

	}

	public function update($new_instance, $old_instance) {				
		return $new_instance;
	}

	public function form($instance) {

			// widget is configured and/or added here
			// semi-wonderful spot to check if the db exists

			// todo: move this to a plugin_registered hook

			// does the db exist?
			global $wpdb;
			$testdb = $wpdb->get_row("show tables like 'widget_assoc_dict'");

			if (0 == count($testdb)) {
				$_result = $wpdb->query("CREATE TABLE `widget_assoc_dict` (`woordid` int(11) NOT NULL auto_increment,
					`woord` varchar(255) NOT NULL default '',
					`omschrijving` text NOT NULL,
					`date_time` datetime NOT NULL default '0000-00-00 00:00:00',
					`ip` varchar(255) NOT NULL default '',
					`useragent` varchar(255) NOT NULL default '',
					PRIMARY KEY  (`woordid`),
					KEY `wrd` (`woord`));");

			}

			// todo: think how the column useragent could be removed.
			// not necessary and want to avoid saving more than is used by the plugin

			$_title = ( isset( $instance['title'] ) ) ? esc_attr($instance['title']) : '';
			$_start = ( isset( $instance['start'] ) ) ? esc_attr($instance['start']) : '';
?>
			<p>
				<label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:'); ?>
					<input class="widefat" 
						id="<?php echo $this->get_field_id('title'); ?>" 
						name="<?php echo $this->get_field_name('title'); ?>" 
						type="text" 
						value="<?php echo $_title; ?>" />
				</label>
			</p>

			<p>
				<label for="<?php echo $this->get_field_id('start'); ?>"><?php _e('Word to start with:'); ?>
					<input class="widefat" 
						id="<?php echo $this->get_field_id('start'); ?>" 
						name="<?php echo $this->get_field_name('start'); ?>" 
						type="text" 
						value="<?php echo $_start; ?>" />
				</label>
			</p>

			<p>
				<label for="<?php echo $this->get_field_id('random'); ?>"><?php _e('Start with a random word', 'assoc-dict'); ?>
					<select id='<?php echo $this->get_field_id('random'); ?>' name='<?php echo $this->get_field_name('random'); ?>'>
						<option value=''></option>
						<option value='yes'<?php echo ('yes' == $instance['random']) ? ' selected' : ''; ?>><?php _e('Yes', 'assoc-dict'); ?></option>
						<option value='no'<?php echo ('no' == $instance['random']) ? ' selected' : ''; ?>><?php _e('No', 'assoc-dict'); ?></option>
					</select>
				</label>
			</p>
<?php 
	}
} // class AssocDictWidget

?>